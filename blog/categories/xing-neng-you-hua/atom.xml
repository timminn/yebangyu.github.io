<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 性能优化 | Yebangyu's Blog]]></title>
  <link href="http://www.yebangyu.org/blog/categories/xing-neng-you-hua/atom.xml" rel="self"/>
  <link href="http://www.yebangyu.org/"/>
  <updated>2018-04-06T22:02:14+08:00</updated>
  <id>http://www.yebangyu.org/</id>
  <author>
    <name><![CDATA[Yebangyu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[性能优化的那些传说和迷思]]></title>
    <link href="http://www.yebangyu.org/blog/2016/12/03/gccandperfopt/"/>
    <updated>2016-12-03T17:04:10+08:00</updated>
    <id>http://www.yebangyu.org/blog/2016/12/03/gccandperfopt</id>
    <content type="html"><![CDATA[<p>相信你在很多书籍中见到很多代码调优（tuning code）的建议和方法。这些书籍可能包括《编程珠玑》、《深入理解计算机系统》、《程序设计实践》、《Optimized C++》等等。坦白说，这些书我都看过，它们确实提供了不少有意思的性能调优的方法，那么我们的问题是，这些建议和方法有效吗？所谓有效，一种衡量途径是，假如我们不那么做，是否编译器已经会自动优化了呢？</p>

<p>本文我们举几个例子，然后开启编译器优化选项后，看看发生了什么。</p>

<p>本文环境为：Ubuntu 14.04 32bit + Intel I7 CPU + GCC 4.8</p>

<p>生成汇编代码的语句是：<code>g++ -S -O2 code.cpp</code></p>

<h2 id="section">循环展开</h2>

<p>对于下面的函数</p>

<p><code>c++
void f1(int *a)
{
  for (int i = 0; i &lt; 3;i++) {
    a[i] = a[i] + 2;
  }
}
</code>
它们建议可以将循环展开，变成这样：
<code>c++
void f2(int *a)
{
  a[0] = a[0] + 2;
  a[1] = a[1] + 2;
  a[2] = a[2] + 2;
}
</code></p>

<!--more-->

<p>OK，我们看看f1函数的反汇编代码：</p>

<p><code>c++
        movl    4(%esp), %eax
        addl    $2, (%eax)
        addl    $2, 4(%eax)
        addl    $2, 8(%eax)
        ret
</code>
嗯，编译器已经自动帮你循环展开了。</p>

<p>练习：那么对于以下这种情况呢？是否有优化效果？</p>

<p><code>c++
void f1(int *a)
{
  for (int i = 0; i &lt; 3n; i += 3) {
    a[i] = a[i] + 2;
    a[i + 1] = a[i + 1] + 2;
    a[i + 2] = a[i + 2] + 2;
  }
}
</code></p>

<h2 id="section-1">循环条件去重</h2>

<p>对于以下函数</p>

<p><code>c++
int g1(char *p)
{
  int xx = 0;
  for (int i = 0 ; i &lt; strlen(p); i++) {
    xx += p[i];
  }
  return xx;
}
</code>
它们建议你可以将第4行中的<code>strlen(p)</code>调用抽离出来放在循环开始前：</p>

<p><code>c++
int g2(char *p)
{
  int xx = 0;
  int len = strlen(p);
  for (int i = 0 ; i &lt; len; i++) {
    xx += p[i];
  }
  return xx;
}
</code></p>

<p>OK，我们看看g1函数的反汇编代码：</p>

<p><code>c++
.LFB26:
        pushl   %ebx
        subl    $24, %esp
        movl    32(%esp), %ebx
        movl    %ebx, (%esp)
        call    strlen //只有一次调用，不在循环里
        movl    %ebx, %edx
        leal    (%ebx,%eax), %ecx
        xorl    %eax, %eax
        jmp     .L2
.L3:
        movsbl  (%edx), %eax
        addl    $1, %edx
        addl    $9977, %eax
.L2:
        cmpl    %ecx, %edx
        jne     .L3
        addl    $24, %esp
        popl    %ebx
        ret
</code></p>

<p>编译器已经帮你做了优化了。Why？本质原因是什么？</p>

<p>这是因为，首先，<code>strlen</code>函数的原型是：</p>

<p><code>size_t strlen(const char *p)</code></p>

<p>看到没，<code>const char</code>，也就是说这个函数不会改变输入参数，并且该函数不会对全局状态做一些设置和改变。而在函数g1内部，也只有对p的读，没有写，因此编译器可以放心地、大胆的做优化，把它当固定量。如果该函数可能有副作用，编译器是不会做这样的优化的。</p>

<p>因此，如果这里不是strlen，而是memcpy这样的函数，显然编译器无法做优化。如果这里不是strlen，而是你的一个辅助函数，比如说help，它的函数签名除了名字之外，和strlen一模一样。为了帮助gcc施展优化，你可以给gcc提供更多更好的提示和信息，比如说：</p>

<p><code>c++
int attribute ((pure)) help(const char *p);
</code></p>

<p>根据gcc文档，pure属性是用来修饰这样的函数：该函数除了返回一些值之外，不会产生其他作用和影响；并且它的返回值只依赖于它的输入参数和一些全局变量，比如说strlen和memcmp。</p>

<p>练习：实现一个简单的help函数，参数分别是<code>const char *p</code>和<code>volatile char *p</code>，查看gcc策略的差异。这个练习有助于让你发现，volatile是如何阻止编译器优化的。</p>

<h2 id="section-2">移位代替简单除法</h2>

<p>对于除以2，它们建议用移位来代替。比如说，对于下面的函数：</p>

<p><code>c++
unsigned int h1(unsigned int a)
{
  return a / 2;
}
</code></p>

<p>它们建议改为：</p>

<p><code>c++
unsigned int h2(unsigned int a)
{
  return a &gt;&gt; 1;
}
</code></p>

<p>查看h1函数的反汇编代码：</p>

<p><code>c++
        movl    4(%esp), %eax
        shrl    %eax //移位指令
        ret
</code></p>

<p>也就是说，编译器已经帮你做了优化。</p>

<p>练习：对于以下函数和“优化”，查看是否必要，是否有效</p>

<p><code>c++
unsigned int h1(unsigned int a)
{
  return a * 9;
}
</code></p>

<p>对应的“优化”版本：</p>

<p><code>c++
unsigned int h2(unsigned int a)
{
  return (a &lt;&lt; 3) + a; //括号不能丢哦。
}
</code></p>

<p>那么，你可能会说了，什么是有效的呢？什么是编译器可能无法自动主动做的呢？你可以参考我的<a href="http://www.yebangyu.org/blog/2016/04/22/optimization/">这篇</a>博客。</p>

<h2 id="section-3">写在最后</h2>

<p>1，本文的演示仅仅是抛砖引玉，更重要的目的则有二：一是授人以鱼不如授人以渔，用一种方法和大家一起分析。二是，尽信书不如无书，必须报着怀疑的态度去读书，去验证，去思考。</p>

<p>2，教科书自然是强调原理的，强调思想的，它和实际有脱节这是无法避免的，也是必须这样的。无可厚非。我并不是说教科书说的这些优化不好，相反，如你所见，非常好。本文的目的是，很可能编译器已经帮你做了。</p>

<p>3，不同的编译器策略可能不同；同一个编译器不同版本策略可能也不同；同一个编译器的同一个版本在不同的上下文对于同一个函数的策略也可能不同。读者诸君务必不要过于相信本文，如我第一点所说：质疑！！！实践！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction To Performance Optimization]]></title>
    <link href="http://www.yebangyu.org/blog/2016/04/22/optimization/"/>
    <updated>2016-04-22T23:13:13+08:00</updated>
    <id>http://www.yebangyu.org/blog/2016/04/22/optimization</id>
    <content type="html"><![CDATA[<h2 id="section">写在最前</h2>

<p>本文针对<strong>C++</strong>和<strong>linux</strong>环境，但是思想和方法，却对其他语言和环境同样适用。很可供参考的。</p>

<h2 id="section-1">优化前</h2>

<p>1，确定优化是必须要做的。</p>

<p>如果程序已经跑的足够快了，内存使用也足够省了，那么完全没有优化的必要。什么是足够呢？能够满足当前的业务和需求。因此，如果不是绝对必要，不要优化。</p>

<p>这是因为虽然优化不是万恶之源，但是优化可能会带来问题。为了提升一点点性能就得绞尽脑汁、辗转反侧；它可能让之前只需要一两行逻辑很清晰的代码，变成很难理解的高度优化的实现。优化很多时候某种程度上让代码可读性和可维护性变差。</p>

<p>2，确定该做的优化都做了</p>

<!--more-->

<p>有两个方法可以免费地、快速地提高效率：</p>

<p>第一个是使用<strong>release</strong>模式。如果您的程序在<strong>debug</strong>模式下表现不佳，那么可以尝试使用<strong>release</strong>模式进行编译链接。一般说来，这也是发布程序的默认模式。</p>

<p>第二是开启编译器优化。例如<strong>g++</strong>就提供了多个级别的优化选项，一般使用<strong>O2</strong>。</p>

<p>3，确定做了优化前的准备工作</p>

<p>最重要的一点是对程序的性能进行详细分析，找出瓶颈段<strong>（hot spot</strong>）。这很重要，否则，可能导致在错误的方向上越走越远。例如一个程序由函数<strong>f</strong>和<strong>g</strong>构成，<strong>f</strong>花费了<strong>2s</strong>，<strong>g</strong>花费了<strong>100ns</strong>，那您把<strong>g</strong>从<strong>100ns</strong>优化为<strong>20ns</strong>，对系统又有什么帮助呢？<strong>f</strong>才是大头啊。</p>

<p>因此，这里就会有三个问题：</p>

<p>第一，如何定位程序瓶颈段？</p>

<p>要是有一个工具，能够告诉我系统模块的开销比例，那就太好了。有这样的工具吗？有的。<strong>Linux</strong>下的<strong>perf</strong>就是。<a href="https://www.ibm.com/developerworks/cn/linux/l-cn-perf1/">这里</a>是对<strong>perf</strong>非常好的<strong>tutorial</strong>，强烈建议初学者阅读。简单说来，一条命令即可：</p>

<pre><code>sudo perf record -g ./yourprograme
</code></pre>

<p>第二，我想给我的程序的某个函数计时，应该怎么做？</p>

<p>有很多方法，强烈建议您阅读我的<a href="http://www.yebangyu.org/blog/2016/01/07/timingcprograminlinux/">这篇</a>博客，很可供参考。我个人比较喜欢用<strong>timespec</strong>，原因是：知道它的人不多；它可以精确到纳秒；它不受系统时钟的影响（<strong>gettimeofday</strong>显然会，因为它就是读取系统时钟嘛）。</p>

<p>第三，优化后，函数变快了，系统变快了多少？</p>

<p>哦，回忆一下我们本科计算机体系结构里的<strong>Amdahl</strong>定律。如果您没学过这个定律，或者早已还给老师，那么<a href="https://en.wikipedia.org/wiki/Amdahl%27s_law">这里</a>的内容可能对您有帮助。</p>

<h2 id="section-2">优化中</h2>

<p>一旦确定要优化，并且定位了瓶颈段，那么就是想尽一切办法进行加速了。个人总结的一些比较有效的思路和方法：</p>

<p>0，<strong>cache friendly access pattern</strong></p>

<p>尽可能利用<strong>cache</strong>，编写<strong>cache friendly</strong>代码。例子，比如说非常著名的二维数组按行按列访问问题。</p>

<p>1，算法和数据结构层面</p>

<p>使用合适的、高效的数据结构和算法，往往能带来很大的提升。不过，前提是，您需要对您的需求进行认真分析。<strong>find、search、insert、successor、del、min、max</strong>这些操作，哪些是您期望需要非常高效的？哪些操作是您业务里经常出现的？</p>

<p>您需要对以下数据结构和算法有所了解：</p>

<p>哈希表：<strong>O(1)</strong>期望查找时间让它常常成为除了数组之外的首选，尤其是当查找非常关键时。只知道<strong>Separate Chaining</strong>和<strong>Open Addressing</strong>？那您<strong>out</strong>了。建议您阅读我的<a href="http://www.yebangyu.org/blog/2015/12/19/cuckoo-hashing/">这篇</a>讲解<strong>cuckoo hashing</strong>的博客。</p>

<p>跳表：说到<strong>O(lgn)</strong>的<strong>insert、find、del</strong>，很多人想到二叉搜索树，由于非平衡的二叉搜索树有退化为<strong>O(n)</strong>的风险，因此很多场景需要平衡树。<strong>B</strong>树？红黑树？太<strong>heavy</strong>了。有时候，您需要跳表，真的，很需要。它足够简单，而且很多时候就能满足您的需求。除此之外，<strong>Treap</strong>也是一种随机的数据结构，我实现的大规模分布式数据库<a href="https://github.com/yebangyu/Soupen">Soupen</a>里就有提供相应的实现，您可以参考我的这篇<a href="http://www.yebangyu.org/blog/2016/05/07/treappkskiplist/">博客</a>。</p>

<p><strong>Sunday</strong>算法：字符串匹配里，<strong>KMP</strong>算法是大名鼎鼎了。谁让<strong>Knuth</strong>是大佬呢？可是，您是否知道<strong>Sunday</strong>算法？<strong>Sunday</strong>算法什么时候会比<strong>KMP</strong>高效而且高效地多？</p>

<p><strong>string.h</strong>里提供的算法：包括<strong>memcmp、memcpy、memmem、memmove</strong>等。当您想手工实现这些函数，正在写一大堆<strong>while</strong>循环时，请优先选择这些库函数。</p>

<p>排序算法：快速排序，非常常见、常用。那么，如何编写一个高效的快速排序？建议您阅读我的<a href="http://www.yebangyu.org/blog/2016/03/09/quicksort/">这篇</a>博客。</p>

<p>2，将小但是频繁调用的函数内联。注意，<strong>gcc</strong>有提供强制内联的<strong>feature</strong>，也就是<code>__attribute__((always_inline))</code></p>

<p>3，为分支预测适当加上<strong>likely</strong>或者<strong>unlikely</strong>。请注意，<strong>if</strong>语句并不可怕，可怕的是分支预测失败。这正和锁并不可怕一样，因为加锁和释放锁其实很快，可怕的是锁冲突。所以，您需要了解这两组宏：</p>

<pre><code>#define  likely(x)        __builtin_expect(!!(x), 1) 
#define  unlikely(x)      __builtin_expect(!!(x), 0) 
</code></pre>

<p>4，消除<strong>if</strong>语句。比如说如下代码：</p>

<pre><code>if (a &gt; 0 ) b += 2; else b+= 1;
</code></pre>

<p>那么可以消除为<code>b += 1 + (a &gt; 0);</code></p>

<p>5，查表法。将反复使用的、不大的、静态的数据事先计算好，存在表格里，需要的时候，直接去查，避免计算。</p>

<p>还有很多很多。就看您的知识面和经验了。</p>

<p>有一个错误的想法，很值得在这里说。很多资料上写着：用移位代替乘除法。因此很多人的代码里充斥着大量的<code>&gt;&gt;1</code> 以及 <code>&lt;&lt;1</code>，美其名曰性能优化。</p>

<p>事实上，现在的编译器很聪明了，一点都不傻，不信您可以直接写<code>a / 2</code> 然后看看开启<strong>-O2</strong>选项后的汇编代码。结果会让您赞叹的。上面的左移一位、右移一位没有任何必要。</p>

<p>正常情况下，请按照逻辑需要直接写代码。现代编译器真的已经很牛逼了。因此，您应该重点关注算法、<strong>Cache</strong>、分支预测等层面。</p>

<h2 id="section-3">优化后</h2>

<p>优化后，请记得再次对您的程序进行<strong>profiling</strong>，确保优化是有效的。</p>

<p>别偏听偏信，别坚信<strong>KMP</strong>一定比暴力算法快，别盲信教科书、博客、资料里的说法，别跪舔大佬！请实际测试！测试！！再测试！！！</p>

<p>一切以您的环境、以您的系统、以您的测试为准。没有权威。</p>

<h2 id="section-4">参考资料</h2>

<p>专门针对<strong>C++</strong>和<strong>Linux</strong>的优化的书，不多。但是有一些零碎的、七七八八的资料，编程珠玑啊，深入理解计算机系统啊，还有最近刚刚出版的<strong>optimized c++</strong>啊等等。</p>

<p>有好心的网友在Github上维护了一个<a href="https://github.com/fenbf/AwesomePerfCpp">项目</a>，分享了不少C++性能优化相关的资料。</p>

]]></content>
  </entry>
  
</feed>
