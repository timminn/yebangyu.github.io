<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c++ | Yebangyu's Blog]]></title>
  <link href="http://www.yebangyu.org/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://www.yebangyu.org/"/>
  <updated>2018-02-10T20:53:43+08:00</updated>
  <id>http://www.yebangyu.org/</id>
  <author>
    <name><![CDATA[Yebangyu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[虚函数和变长参数模板的妙用]]></title>
    <link href="http://www.yebangyu.org/blog/2017/02/17/virtualfunctionandvariadicparametertemplate/"/>
    <updated>2017-02-17T22:32:08+08:00</updated>
    <id>http://www.yebangyu.org/blog/2017/02/17/virtualfunctionandvariadicparametertemplate</id>
    <content type="html"><![CDATA[<p>假如我们需要设计和实现自己的容器，比如说vector，list，queue等。</p>

<p>同一类容器，我们可能有不同的实现和用途，因此我们抽象出了一个Base Class，比如说(以Vector为例)：</p>

<p>```c++
#include<iostream>
using namespace std;
template<typename t="">
class BaseVector
{
public:
  virtual void pre_allocate(int capacity) = 0;
};</typename></iostream></p>

<p>template<typename t="">
class SmallVector: public BaseVector<t> //一种特定的实现
{
public:
  virtual void pre_allocate(int capacity)
  {
    p_ = (T*)malloc(sizeof(T) * capacity); //实际里可能不是malloc，而是自己实现的allocator
   //错误处理等等不在本文考虑范围之内
    for (int i = 0; i &lt; capacity; ++i) {
      new(&amp;p_[i]) T(); //预先构造好。注意，这里需要参数个数为0的默认构造函数
    }
  }
private:
  T *p_;
};
class NoParameters
{
  //do something
};
int main()
{
  SmallVector<noparameters> vec0;
  vec0.pre_allocate(1000);
  return 0;
}
```</noparameters></t></typename></p>

<p>没问题。一切完美。不过你试图这样使用vector类，就不行了：</p>

<!--more-->

<p><code>c++
class OneParameter
{
public:
  OneParameter(int a)
  {
    //do something
  }
};
SmallVector&lt;OneParameter&gt; vec1;
vec1.pre_allocate(1000);
</code></p>

<p>编译不过，因为以上实现要求函数参数列表为空的默认构造函数，而OneParameter类（只）提供了带一个参数的构造函数，因此编译出问题，如下所示。</p>

<p><code>c++
../src/hehe.cpp:15:19: error: no matching constructor for initialization of 'OneParameter'
      new(&amp;p_[i]) T();
1 error generated.
make: *** [src/hehe.o] Error 1
</code></p>

<p>怎么办？使用C++11的变长参数模板，我们可以这样：</p>

<p><code>c++
#include&lt;iostream&gt;
using namespace std;
template&lt;typename T, class... Args&gt;
class BaseVector
{
public:
  virtual void pre_allocate(int capacity, Args...) = 0;
};
template&lt;typename T, class... Args&gt;
class SmallVector: public BaseVector&lt;T, Args...&gt;
{
public:
  virtual void pre_allocate(int capacity, Args... args)
  {
    cout&lt;&lt;"small vector"&lt;&lt;endl;
    p_ = (T*)malloc(sizeof(T) * capacity);
    for (int i = 0; i &lt; capacity; ++i) {
      new(&amp;p_[i]) T(std::forward&lt;Args&gt;(args)...);
    }
  }
private:
  T *p_;
};
template&lt;typename T, class... Args&gt;
class FastVector: public BaseVector&lt;T, Args...&gt;
{
public:
  virtual void pre_allocate(int capacity, Args... args)
  {
    cout&lt;&lt;"fast vector"&lt;&lt;endl;
    p_ = (T*)malloc(sizeof(T) * capacity);
    for (int i = 0; i &lt; capacity; ++i) {
      new(&amp;p_[i]) T(std::forward&lt;Args&gt;(args)...);
    }
  }
private:
  T *p_;
};
class TwoParameters
{
public:
  TwoParameters(int a, int b)
  {
    //do something
  }
};
class ThreeParameters
{
public:
  ThreeParameters(int a, int b, double c)
  {
    //do something
  }
};
int main()
{
  SmallVector&lt;TwoParameters, int , int&gt; small_vec2;
  SmallVector&lt;ThreeParameters, int , int, double&gt; small_vec3;
  FastVector&lt;TwoParameters, int , int&gt; fast_vec2;
  FastVector&lt;ThreeParameters, int , int, double&gt; fast_vec3;
  ////////////////////////////////////////////////////////
  BaseVector&lt;TwoParameters, int , int&gt; *p = &amp;small_vec2;
  p-&gt;pre_allocate(1,1,1);
  p = &amp;fast_vec2;
  p-&gt;pre_allocate(1,1,1);
  //////////////
  BaseVector&lt;ThreeParameters, int , int, double&gt; *q = &amp;small_vec3;
  q-&gt;pre_allocate(1,2,2,2);
  q = &amp;fast_vec3;
  q-&gt;pre_allocate(1,2,2,2);
  return 0;
}
</code></p>

<p>输出如下：</p>

<p><code>c++
small vector
fast vector
small vector
fast vector
</code></p>

<p>啊，看起来多么完美！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String与Copy On Write]]></title>
    <link href="http://www.yebangyu.org/blog/2016/06/04/copy-on-write-in-string-and-soupen/"/>
    <updated>2016-06-04T18:13:27+08:00</updated>
    <id>http://www.yebangyu.org/blog/2016/06/04/copy-on-write-in-string-and-soupen</id>
    <content type="html"><![CDATA[<h2 id="copy-on-write">什么是Copy On Write</h2>

<p>Copy On Write(COW)作为一种优化技术被广泛使用，在string的实现中也不例外。考虑如下的代码：
<code>c++
string s("1234");
string t = s;
cout&lt;&lt;t[1]&lt;&lt;endl;
</code>
第二行，通过调用copy constructor（注意，这里调用的是copy constructor，而不是copy assignment，因为它是从无到有构造对象，而不是设置已有对象）构造对象t，第三行对t中的某个元素进行只读操作。</p>

<p>如果让你实现copy constructor，你会怎么做呢？教科书里的、简单的实现大概是这样：</p>

<!--more-->

<p><code>c++
class string
{
  private:
    char *data_;
};
string(const string &amp;other)
{
  data_ = new char[strlen(other.data_) + 1/*加1是考虑\0*/];
  strcpy(data_, other.data_);
}
</code></p>

<p>好了，既然只是对t进行只读，那么就没完全必要分配内存、拷贝字符串等昂贵操作了，而是复用s的字符串空间即可。这就是我们要谈到的string中的COW。</p>

<h2 id="copy-on-write-1">如何实现Copy On Write</h2>

<p>显然，现在是有多个对象绑定或者说涉及或者说引用到某个字符串缓冲区上了。事实上，正如你能想到的，引用计数（Reference Counting，RC）是实现COW的重要基础。当执行上面最上面代码的第二行时，并不为t分配内存、拷贝字符串，而是相应的字符串的引用计数加1即可。</p>

<p>那么，引用计数应该放在哪里呢？它是string类的普通成员么？不行，这样子每个string对象都有一个引用计数了；成为string类的静态成员变量么？也不行，这样子每个类都只有一个引用计数了。</p>

<p>实际上，我们应该把buffer和引用计数抽离出来，单独放到某处。</p>

<p><code>c++
struct stringvalue
{
    char *data_;
    int rc_;
}
class string
{
  private:
    stringvalue *sv_;
};
string(const string &amp;other)
{
  sv_ = other.sv_;
  (other.sv_)-&gt;rc_++;
}
</code>
就这么简单，仅仅是attach，仅仅是增加引用计数。没有memory allocation，没有strcpy或者memcpy了。</p>

<p>如果仅仅是只读操作，那么这没任何问题。但是如果要写了呢？这时候没办法了，必须复制了。这就是所谓lazy evaluation，拖延战术(对应的是eager evaluation)。</p>

<p><code>c++
void set_char(const int idx, char new_char)
{
  if (sv_-&gt;rc_ &gt; 1) {
    //引用计数至少是2。说明除了自己，还有别人也引用到了这个buffer，不得不分配内存了，否则影响到别人了。
    stringvalue *tmp = sv_;
    sv_ = new stringvalue();//重新搞一份
    sv_-&gt;data_ = new char[strlen(tmp-&gt;char_) + 1];
    strcpy(sv_-&gt;data_, tmp-&gt;char_);
    sv_-&gt;rc_ = 1;
    --tmp-&gt;rc_;//把原来的引用计数减1
    //......
} else {
  //......
}
</code></p>

<h2 id="copy-on-write-">Copy On Write 会带来什么问题？</h2>

<p>在单线程环境下，使用Copy On Write不容易出问题。不过多线程下，就险象环生了。</p>

<p>如果string内部做同步，那么这无疑增加了string的实现复杂度，并且STL的初衷其实是只考虑单线程环境的。同步操作无疑会带来大量的开销。</p>

<p>如果string内部不做同步，那么问题就来了。</p>

<p>加锁啊，加锁不就完了么？没那么容易。你看：</p>

<p><code>c++
 string s;//临界资源，全局变量
 void f()
 {
   lock.lock();
   string t = s;
   lock.unlock();
   //这里可能读写操作t
</code></p>

<p>那么，对t的操作也得加锁，如果有人通过t又复制了一个对象w，那么操作w的时候也得加锁，这太难了。这里，本质困难在于，可能会有很多对象，我们无法控制的对象都绑定到一块buffer上。</p>

<p>不过这样也没什么，毕竟不管有没有使用COW，使用STL时候都不应该对它有多线程安全的幻想。但是使用COW后确实更加危险，因为加锁的难度变大了，甚至都不知道在哪里加了。</p>

<p>想想看，在多线程环境下，假如string使用了COW优化，将c_str()返回的指针强制去掉const，以及operator []的读写可能会有什么问题。</p>

<h2 id="copy-on--write-">使用Copy On  Write 么？</h2>

<p>假如你是库设计和实现者，你会用COW么？</p>

<p><a href="https://github.com/yebangyu/Soupen">Soupen</a>是一款高性能的nosql数据库，旨在能在某些方面替代Redis。它由不著名码农、秦汉史历史学家、本站站长Yebangyu同学在业余时间独立开发完成。</p>

<p>Soupen也实现了自己的string，并不使用Copy On Write(lazy evaluation)。而是使用eager evaluation，立即分配内存，立即拷贝。</p>

<p>在我们的应用中，调用copy constructor后对它进行写（而不是只读）的概率很大，拉拉扯扯各种引用计数加加减减，还不如直接分配+拷贝，反正后面也要做这个工作，何必自寻烦恼。</p>

<p>而且Soupen是服务器，不是类库，使用者是自己而不是广大用户，不需要考虑各种各样的情况。</p>

<p>当然，对于短字符串Soupen是做了优化的，可以参考<a href="http://www.yebangyu.org/blog/2016/05/15/stringinyedis/">这里</a>的源码解读。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String Literal In C++]]></title>
    <link href="http://www.yebangyu.org/blog/2016/04/10/stringliteralincpp/"/>
    <updated>2016-04-10T22:05:21+08:00</updated>
    <id>http://www.yebangyu.org/blog/2016/04/10/stringliteralincpp</id>
    <content type="html"><![CDATA[<p>最近被一个很基本的知识点给咬伤，虽然之前知道这个问题，但是写代码的时候不小心还是容易犯错。简单记录一下。</p>

<h2 id="section">提出问题</h2>

<p>之前，代码里拥有如下数组：</p>

<p><code>c++
const char *COLORS[3] = {"red",
                         "black",
                         "green"
                        };
</code></p>

<p>现在需要以追加的形式，添加一个yellow的颜色。粗心之下，我写成了：</p>

<!--more-->

<p><code>c++
const char *COLORS[4] = {"red",
                         "black",
                         "green"
                         "yellow"
                        };
</code></p>

<p>在某处代码，我使用了COLORS[3]，类似于</p>

<p><code>cout&lt;&lt;COLORS[3]&lt;&lt;endl;</code></p>

<p>程序执行后，就崩溃了。</p>

<h2 id="section-1">分析问题</h2>

<p>问题出在，在追加的代码中的第4行，漏掉了一个逗号！！！正确的形式应该是：</p>

<p><code>c++
const char *COLORS[4] = {"red",
                         "black",
                         "green", //这里应该有个逗号！！！
                         "yellow"
                        };
</code></p>

<p>在没有逗号下，编译器将”green”和”yellow”当做一个字符串，也就是”greenyellow”，因此，COLORS[2]其实是”greenyellow”，而COLORS[3]是未显式初始化的，为NULL。因此使用COLORS[3]程序崩溃。</p>

<h2 id="section-2">解决问题</h2>

<p>上面已经解决了问题。这里小小补充下:</p>

<p>在C++中，如下几种形式结果是一样的，表示的是同一个字符串”hello, world” ：</p>

<p><code>c++
"hello, world"
</code></p>

<p><code>c++
"hello, "
"world"
</code></p>

<p><code>c++
"hello, \
world"
</code></p>

<p><code>c++
"hello, "  "w"  "orld"
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C99中的柔性数组]]></title>
    <link href="http://www.yebangyu.org/blog/2016/03/25/fuckthefever/"/>
    <updated>2016-03-25T12:00:34+08:00</updated>
    <id>http://www.yebangyu.org/blog/2016/03/25/fuckthefever</id>
    <content type="html"><![CDATA[<p>柔性数组是C99引入的feature。</p>

<p><code>c++
struct Data
{
  int i;
  int a[0];
};
</code></p>

<p>其中柔性数组a处于结构体的末尾，并且声明的大小为0。</p>

<!--more-->

<p>那么它有什么性质呢？</p>

<p>1，首先，a不占用结构体空间。它只是一个占位符而已。因此</p>

<p>sizeof(Data) = sizeof(int) （这里的int是那个变量i）</p>

<p>2，我们可以利用a来分配动态内存：</p>

<p><code>c++
Data *p = (Data*) malloc(sizeof(Data) + 10 * sizeof(int))
</code></p>

<p>这样，p就包含了10个int型元素构成的数组。</p>

<p>3，有些人说，为什么我们不这样呢？</p>

<p><code>c++
struct Data
{
  int i;
  int *a;
};
Data *p = (Data*) malloc(sizeof(Data));
p-&gt;a = (int*) malloc(10 * sizeof(int));
</code></p>

<p>这样子不是挺好的么？是挺好的，但是这样结构体大小就得翻倍了，因为这下a不是占位符而是实实在在的指针变量了。</p>

<p>这还算小事。大事呢？这就是我们第三点要扯的：如果改成这样后，结构体成员i和数组a中的(首个)元素，地址将几乎肯定不是挨着的！！！这可能会带来很多问题，包括cache unfriendly等。</p>

<p>而如果使用柔性数组，我们可以简单做个实验发现：</p>

<p><code>c++
#include&lt;iostream&gt;
using namespace std;
struct Data
{
  int i;
  int a[0];
};
int main()
{
  Data *p = (Data*)malloc(sizeof(Data) + 100 * sizeof(int));
  cout&lt;&lt;&amp;(p-&gt;i)&lt;&lt;endl;
  cout&lt;&lt;&amp;(p-&gt;a[0])&lt;&lt;endl;
  cout&lt;&lt;sizeof(Data)&lt;&lt;endl;
  return 0;
}
</code>
在ubuntu 14.04 64位系统＋gcc 4.8下编译运行后，程序输出：</p>

<pre><code>0x8a9010
0x8a9014
4
</code></pre>

<p>不额外占用空间、实现变长结构体、连续地址。能同时做到这三点的，除了柔性数组，不知还能有谁？不过这玩意，个人意见能少用尽量少用，能不用尽量不用，毕竟可能有移植性问题。</p>

<p>柔性数组的一个很常见的应用是跳表(Skip List)。由于跳表中不同的节点拥有不尽相同的高度,每个节点所包含的后继指针数量也不尽相同,因此此时柔性数组的合理使用可以最大利用内存空间.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编写高质量代码(下)]]></title>
    <link href="http://www.yebangyu.org/blog/2016/02/24/writeelegantcodes/"/>
    <updated>2016-02-24T22:26:44+08:00</updated>
    <id>http://www.yebangyu.org/blog/2016/02/24/writeelegantcodes</id>
    <content type="html"><![CDATA[<p><a href="http://www.yebangyu.org/blog/2015/11/06/how-to-write-elegant-cpp-codes/">上回</a>我们从微观角度，以一个实际的例子，从正确、高效、易读等特性着手，介绍了如何编写高质量的代码。这次，我们从宏观出发，从软件开发流程入手，着重介绍其中的几个方面，包括代码规范、Code Review、测试等。</p>

<p>如果说<a href="http://www.yebangyu.org/blog/2015/11/06/how-to-write-elegant-cpp-codes/">上回</a>的内容注重个人编码，那么本文将偏向团队开发。</p>

<h2 id="section">代码规范</h2>

<p>团队的代码规范，一般由领导和大佬们制定后，大家统一实行。这里面有几个问题：</p>

<h3 id="section-1">真的需要代码规范吗？</h3>

<p>言下之意，制定和执行代码规范是否浪费时间？</p>

<!--more-->

<p>答案是：It depends。如果项目很庞大、代码质量要求很高，那么，制定和执行代码规范所花费的时间，将大大少于后期因为不规范开发带来的种种调试和维护成本。如果是小打小闹的代码，就无所谓了。</p>

<h3 id="section-2">代码规范的制定为什么这么难？</h3>

<p>原因众多，其中一个很重要的部分是团队每个人的口味和观点不尽相同。就代码风格而言，有人喜欢对内置类型变量i使用i++，有人坚持认为应该使用++i不管i是不是复杂类型。因此，制定代码规范需要在讨论之后最后拍板决定，这里面甚至需要独裁！是的，独裁！</p>

<h3 id="section-3">代码规范制定需要注意什么事项？</h3>

<p>如果代码规范限制太松，那么等于没有规范；如果太严，大大影响开发效率。这里面的尺度，需要根据项目需要、团队成员特点全面考量，进行取舍。</p>

<p>需要注意的是，没有任何一种代码规范是完美的。例如，在C++中，如果启用异常，那么代码的流程将会被各种异常处理中断，各种try catch throw让代码很不美观；如果禁用异常，也就是在开发的过程中不能使用异常特性，那么团队成员可能因为长期没有接触这项语言feature而造成知识和技能短板。</p>

<h3 id="section-4">代码风格举例</h3>

<p>举两个我认为比较重要、比较新鲜、比较有趣的代码风格。</p>

<p>1，使用引用需要判空吗？</p>

<p><code>c++
void f(int &amp;p);
void g(int *p);
</code></p>

<p>我们都知道，在g中，使用*p前需要对p是否为NULL进行判断，那么f呢？如果质量非常关键、代码安全非常重要的场景，那么实际上，也是需要的。想想看，这是为什么。</p>

<p>2，级联if else语句。</p>

<p>首先看一个个人认为不好的代码风格：</p>

<p><code>c++
int f(int a, int b)
{
  if (a &gt;= 1) {
    if (b &gt;= 1) {
      if (a &gt;= b) {
        //do sth
      } else {
        //error1
      }
    } else {
      //error2
    }
  } else {
    //error3
  }
}
</code>
这个函数的核心在于do sth部分。其实我们可以改写为级联if－else形式，如下：</p>

<p><code>c++
int f(int a, int b)
{
  if (a &lt; 1) {
    //error3
  } else if (b &lt; 1) {
    //error2
  } else if (a &lt; b) {
    //error1
  } else {
    //so, a&gt;=1 &amp;&amp; b&gt;=1 &amp;&amp; a&gt;=b
    //do sth
  }
}
</code>
是不是优美多了？前面只做一些错误处理、前期准备、参数检查等，最后的else分支做实实在在的功能性事情。</p>

<h2 id="code-review">Code Review</h2>

<h3 id="code-review-1">什么是Code Review？</h3>

<p>很多人把它翻译为代码审查，我觉得太政治味了。程序员尤其是新手写完代码后，可能会有风格问题（比如不符合团队的代码规范）、安全性问题(比如忘记指针判空)、优雅性问题(比如大量冗余代码)、正确性问题（比如算法设计错误），那么在发布代码到公共库之前，提交给师兄或者mentor，让他帮你review一下代码，并提出可能的问题和建议，让你好好修改。这样的过程，就叫做Code Review。</p>

<h3 id="section-5">我的天呐，那这不是很占用时间？</h3>

<p>是的。一个写代码，一个看代码，看代码的时间可能并不比全新写一份代码少。那么，这又是何必呢？</p>

<p>主要的原因有：</p>

<p>1，review确实占用了开发时间，然而开发，或者说写代码，其实只占很少的时间比例。很多时间花在debug、调试、写文档、需求分析、设计算法、维护等等上。</p>

<p>2，代码质量非常重要，这点时间投入是值得的。与其后期苦逼追bug，不如前期多投入点时间和人力。</p>

<p>3，培养新人，让新手更快成长。</p>

<h3 id="code-review-2">如何更好的执行Code Review</h3>

<p>这里给几点建议：</p>

<p>1，不走过场。走过场，还不如不要这个流程。</p>

<p>2，作为Reviewer，看不懂代码就把作者拉过来，当面询问，不要不懂装懂，也不要爱面子不好意思问。</p>

<p>3，作为Coder，心里要有感激之情。真的。不要得了便宜还卖乖，感恩reviewer，感激reviewer对自己的进步和成长所做出的贡献，所花费的心血。中国人里狼心狗肺、忘恩负义、不懂感恩的人还算少吗？</p>

<p>4，作为Coder，给Reviewer Review之前，请先做单元测试并确保通过，并自己尝试先整体看一遍自己本次提交的代码。</p>

<p>注意，不要给别人提还没调试通过的代码，这是非常不尊重别人的表现。</p>

<h2 id="section-6">质量保证</h2>

<p>1，测试不是专属QA的活儿，对自己写的代码提供质量保证，是程序员的职责。QA要负责的，是系统的质量，不是模块的质量。</p>

<p>2，测试，需要意识，需要坚持。我发现C++程序员、Java程序员的测试意识或者说质量意识最强。</p>

<p>3，测试用例的编写和设计需要保证一定的代码覆盖率（过分追求覆盖率也很没意思，也没必要），力求让绝大多数分支和流程的代码都走到，然后分析运行结果是否是符合期望的，不要只考虑正确路径上的那些分支。</p>

<p>4，测试用例的编写和设计力求全面，考虑到方方面面。以非常经典的二分搜索为例：</p>

<p>int binary_search(int *p, int n, int target, int &amp;idx);</p>

<p>binary_search函数返回值为0表示成功执行，输出参数idx返回target在有序数组p中(第一次出现)的位置，－1表示不存在。</p>

<p>那么测试用例至少应该涵盖：</p>

<ul>
  <li>
    <p>p为NULL的情况</p>
  </li>
  <li>
    <p>数组大小n分别为负数、0、1、2时情况</p>
  </li>
  <li>
    <p>数组p不是有序数组的情况</p>
  </li>
  <li>
    <p>target在数组中出现0次、1次、n次的情况</p>
  </li>
</ul>

<p>你是否都考虑到了呢？</p>

<p>5，有时候，自己书写测试用例显得刀耕火种，现在已经有很多辅助的工具，读者可以自行google一下。</p>
]]></content>
  </entry>
  
</feed>
